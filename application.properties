#spring.thymeleaf.prefix=classpath:/webapp/
#spring.thymeleaf.suffix=.jsp
# se non funziona mettilo false il seguente
#spring.thymeleaf.enabled=false
#prefix: classpath:/templates/

#spring.jpa.open-in-view=true
#spring.devtools.add-properties=true
loggin.level.web=DEBUG
spring.postgresql.console.enabled=true 
#spring.mvc.static-path-pattern=/webapp/
#spring.mvc.view.prefix=/pages/
#spring.mvc.view.suffix=.jsp
#spring.datasource.platform=postgres
# sostituito da:
view.prefix:/webapp/WEB-INF/
suffix:.jsp
#spring.mvc.view.prefix:/webapp/
#spring.mvc.view.suffix:.jsp
server.port=8080
#spring.mvc.view.prefix=/src/main/webapp/
#spring.mvc.view.suffix=.jsp
#org.springframework.boot.autoconfigure.web.ResourceProperties=/webapp/
#org.springframework.web.servlet.resource.PathResourceResolver=/webapp/
spring.sql.init.platform=postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/Parlamento
spring.datasource.username=postgres
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL10Dialect
#spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.use-new-id-generator-mappings=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

spring.datasource.password=***********
spring.jpa.properties.hibernate.format_sql=true
#spring.sql.init.mode=always
#spring.sql.init.schema-locations=classpath:/schema.sql
spring.sql.init.continue-on-error=true
spring.profiles.active=@spring.profiles.active@
logging.level.org.springframework.web: DEBUG

enableLoggingRequestDetails=true

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
spring.datasource.tomcat.abandon-when-percentage-full=1
#spring.datasource.validationQuery = SELECT 1

#spring.datasource.xa.data-source-class-name= SELECT 1
#-Dspring.resources.static-locations=/webapp/
#spring.datasource.url=jdbc:postgresql://HOST:PORT/activitydb
#spring.datasource.username=activityman
#spring.datasource.password=activitymanpasses
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL10Dialect
#spring.jpa.generate-ddl=true
spring.main.allow-bean-definition-overriding=true

#spring.datasource.type=org.apache.commons.dbcp.BasicDataSource
spring.datasource.type=com.zaxxer.hikari.HikariDataSource

spring.resources.dynamic-locations=/webapp/WEB-INF/
#static-locations=file:/webapp/,classpath:/webapp/

#spring.resources.static-locations=file:/var/www/static,classpath:static
security.ignored="classpath:META-INF/resources/"
security.ignored="classpath:resources/"
security.ignored="classpath:static/"
security.ignored="classpath:public/"
security.ignored="classpath:/"
security.ignored="src/main/resources"
security.publicPaths="/webapp/WEB-INF/"
 #[classpath [META-INF/resources/], classpath [resources/], classpath [static/], classpath [public/], ServletContext [/]]
 #"classpath:/META-INF/resources/", "classpath:/resources/",
	    #        "classpath:/static/", "classpath:/public/","classpath:/webapp/", "classpath:/webapp/" };
#server.servlet.context-path=/

#spring.resources.add-mappings=true
application1.spring.profiles.active=tomcat 9.0.52 
application.propertiesspring.profiles.active=${application1.spring.profiles.active}





#spring.datasource.url=${}
#spring.data.'springframework.username=${MONGO_INITDB_ROOT_USERNAME} 
#sever.address=127.0.0.1
server.error.include-exception=true
server.error.include-stacktrace=always

server.error.whitelabel.enabled=false
server.error.path=/error
server.servlet.context-path=/
server.servlet-path=/Parlamento
#spring.resources.static-locations=/webapp/
#spring.web.resources.static-locations=classpath:/webapp/,classpath:/webapp

#spring.web.resources.static-locations=/src/main/resources/static/error/
spring.web.resources.static-locations=/src/main/resources/template/


#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration




server.tomcat.max-threads=200
server.tomcat.connection-timeout=5s
server.max-http-header-size=18KB
server.tomcat.max-swallow-size=12MB
server.tomcat.max-http-form-post-size=12MB




#server.ssl.ciphers=TLS_RSA_WITH_AES_128_CBC_SHA256
# INCLUDE_ANY_OTHER_ONES_YOU_NEED_TO_SUPPORT

#server.ssl.using-strong-defaults=Y

#server.ssl.using-strong-defaults=S
#server.ssl.protocols=auto
#server.ssl.cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256

#server.ssl.client-auth= # Whether client authentication is wanted ("want") or needed ("need"). Requires a trust store.
#server.ssl.enabled= # Enable SSL support.
#server.ssl.enabled-protocols= # Enabled SSL protocols.
#server.ssl.key-alias= # Alias that identifies the key in the key store.
#server.ssl.key-password= # Password used to access the key in the key store.
#server.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file).
#server.ssl.key-store-password= # Password used to access the key store.
#server.ssl.key-store-provider= # Provider for the key store.
#server.ssl.key-store-type= # Type of the key store.
#server.ssl.protocol=TLS # SSL protocol to use.
#server.ssl.trust-store= # Trust store that holds SSL certificates.
#server.ssl.trust-store-password= # Password used to access the trust store.
#server.ssl.trust-store-provider= # Provider for the trust store.
#server.ssl.trust-store-type= # Type of the trust store.


ErrorProperties.IncludeStacktrace=ALWAYS






-Dspring.devtools.restart.enabled=true

#-Dspring.devtools.restart.enabled=false 